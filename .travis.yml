language: cpp
sudo: required
dist: xenial

os:
 - linux
 - osx
matrix:
 exclude:
# Only do coverity or coverage build on Linux when the compiler is gcc
  - os: linux
    compiler: clang
    env: COVERITY=1
    env: COVERAGE=1
# Don't build with clang on Linux
  - os: linux
    compiler: clang
# Don't build with gcc on OSX
  - os: osx
    compiler: gcc

before_install: 
- if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
    sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y;
    sudo add-apt-repository ppa:beineri/opt-qt-5.12.6-xenial -y;
    sudo apt-get update -qq;
    fi

#MAC OS
- if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
    brew update > /dev/null;
    fi

install:
- if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
    sudo apt-get -y install build-essential qt5-default qt512tools qt512base g++-8 zsync; 
    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 90;
    fi

#MAC OS
- if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
    brew install qt5;
    chmod -R 755 /usr/local/opt/qt5/*;
    fi

script:
- if [ "$TRAVIS_OS_NAME" = "linux" ]; then
    source /opt/qt*/bin/qt*-env.sh;
    qmake Black_Chocobo.pro;
    make -j2;
    make INSTALL_ROOT=appdir install; find appdir/;
    mv appdir/usr/share/blackchocobo/lang appdir/usr/bin/lang;
    rm -rf appdir/usr/share/blackchocobo appdir/usr/share/menu;
    wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage";
    chmod a+x linuxdeployqt*.AppImage;
    unset QTDIR; unset QT_PLUGIN_PATH; unset LD_LIBRARY_PATH;
    export VERSION=continuous;
    ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -bundle-non-qt-libs;
    ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -appimage;
    fi
- if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
    export QTDIR="/usr/local/opt/qt5";
    export PATH="$QTDIR/bin:$PATH";
    qmake Black_Chocobo.pro;
    make -j2;
    mkdir -p Black_Chocobo.app/Contents/MacOS/lang;
    mv lang/*.qm Black_Chocobo.app/Contents/MacOS/lang/;
    macdeployqt Black_Chocobo.app/ -dmg;
    fi

after_success:
- wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
- if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
    find ./appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq ;
    bash ./upload.sh Black_Chocobo*.AppImage*;
    fi
- if [ "$TRAVIS_OS_NAME" = "osx" ]; then
    mv Black_Chocobo*.dmg* Black_Chocobo-continuous*.dmg*;
    bash ./upload.sh Black_Chocobo*.dmg*;
    fi

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "B4xjY+hcZOob6hGLx8b5Ykxk+8sN9M+XwfnuhRReR1YRFvXZdcUUiL/VusDM0iapUGhkuvbO0AQEeLPaC69uBNdxQsBJFGFMzrHZGEtuBFl44SJB+lZGRTVemj3AZ4f5aQvTkKFbt7M+/sjkWa6ZP6EHdrAN2XCp4emrwKBApO4="

addons:
  apt:
  
  coverity_scan:
    project:
      name: "sithlord48/blackchocobo"
      description: "Final Fantasy VII Save Editor"
    notication_email: sithlord48@gmail.com
    build_command_prepend: "qmake Black_Chocobo.pro"
    build_command:   "make -j 4"
    branch_pattern: coverity_scan

branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)$/
